--- PHP ---
<?php

class TextInput
{    
    public $str = '';

    public function add($text) {
        $this->str .= $text;
    }
    public function getValue() {
        return $this->str;
    }
}

class NumericInput extends TextInput
{

    public function add($text) {
        if ( is_numeric($text)) {
            $this->str .= $text;
        }
    }
}

--- JAVA ---



public class UserInput {

	public static class TextInput {
		// current value
		private final StringBuilder sb = new StringBuilder();

		public void add(final char ch) {
			sb.append(ch);
		}

		public String getValue() {
			return sb.toString();
		}
	}

	public static class NumericInput extends TextInput {
	    // The Override annotation is used to check if a function is overriding a parent function.
		@Override
		public void add(final char ch) {
			if (Character.isDigit(ch))
				super.add(ch);
		}
	}

	public static void main(String[] args) {
        TextInput input = new NumericInput();
        input.add('1');
        input.add('a');
        input.add('0');
        System.out.println(input.getValue());
    }
}



--- C# ---

using System;
using System.Text;

public class TextInput
{
    private readonly StringBuilder sb = new StringBuilder();

    public virtual void Add(char ch)
    {
        sb.Append(ch);
    }

    public string GetValue()
    {
        return sb.ToString(); //ch: '1' + '0' = "10"
    }
}

public class NumericInput : TextInput
{
    public override void Add(char ch)
    {
        // if ch is a numeric value then append its value to the base's (TextInput) field sb,
        //  so sb will store the value '1' and '0' one after the other
        // so it will skip the letter 'a' (when ch is 'a')
        if (char.IsDigit(ch))
            base.Add(ch);
    }
}

public class UserInput
{
    public static void Main(string[] args)
    {
        var input = new NumericInput();
        input.Add('1');
        input.Add('a');
        input.Add('0');
        Console.WriteLine(input.GetValue());
    }
}



